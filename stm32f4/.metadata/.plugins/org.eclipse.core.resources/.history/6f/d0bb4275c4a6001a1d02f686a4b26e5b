/**
  ******************************************************************************
  * @file    ADC_DMA/main.c
  * @author  MCD Application Team
  * @version V1.0.1
  * @date    11-November-2013
  * @brief   This example describes how to use the ADC and DMA to transfer 
  *          continuously converted data from ADC to memory.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "halFunct.h"
#include "coefficients.h"
#include "arm_math.h"


/** @addtogroup STM32F429I_DISCOVERY_Examples
  * @{
  */

/** @addtogroup ADC_DMA
  * @{
  */


/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/ 

#define SENDING_BLOCKS 2
#define BUFFER_SIZE_16BITS	640
#define BUFFER_SIZE_8BITS	BUFFER_SIZE_16BITS*2

#define NUM_COEFF       30

__IO uint8_t uartRxBuffer_8bits1[BUFFER_SIZE_8BITS];
__IO uint8_t uartRxBuffer_8bits2[BUFFER_SIZE_8BITS];

__IO uint8_t * uartRxBuffer_8bits[2] = {uartRxBuffer_8bits1 , uartRxBuffer_8bits2};

__IO uint8_t uartTxBuffer_8bits1[BUFFER_SIZE_8BITS*SENDING_BLOCKS + 5];
__IO uint8_t uartTxBuffer_8bits2[BUFFER_SIZE_8BITS*SENDING_BLOCKS + 5];

__IO uint8_t * uartTxBuffer_8bits[2] = {uartTxBuffer_8bits1 , uartTxBuffer_8bits1};

uint16_t data_in_buffer_16bits[BUFFER_SIZE_16BITS];
uint16_t data_out_buffer_16bits[BUFFER_SIZE_16BITS];

uint8_t data_out_buffer_8bits_right[BUFFER_SIZE_8BITS];
uint8_t data_out_buffer_8bits_left[BUFFER_SIZE_8BITS];

float32_t data_in_buffer_float[BUFFER_SIZE_16BITS];
float32_t data_out_buffer_float[BUFFER_SIZE_16BITS];

arm_fir_instance_f32 fir_struct_right_channel = {0};
arm_fir_instance_f32 fir_struct_left_channel = {0};


const float32_t fir_coefficients_bandpass[NUM_COEFF] = {
	   0.001230077818,-0.0004656519159,-0.001785991597,-0.001315643196,  0.00219952222,
	   0.006215703674, 0.002844037721, -0.01646158099, -0.05142180994, -0.08645879477,
	   -0.09540998191, -0.05775989592,  0.02379585057,   0.1185133532,   0.1819779277,
		 0.1819779277,   0.1185133532,  0.02379585057, -0.05775989592, -0.09540998191,
	   -0.08645879477, -0.05142180994, -0.01646158099, 0.002844037721, 0.006215703674,
		0.00219952222,-0.001315643196,-0.001785991597,-0.0004656519159, 0.001230077818
};

const float32_t fir_coefficients_lowpass[NUM_COEFF] = {
	   0.001660885755, 0.001669131219,-0.0003099146998,-0.004270857666, -0.00634398777,
	  -0.0005407619174,  0.01264786068,   0.0203030128,  0.00594812585, -0.02935836092,
		-0.0549142547, -0.02712169848,  0.07165023685,   0.2060391754,   0.3029414117,
		 0.3029414117,   0.2060391754,  0.07165023685, -0.02712169848,  -0.0549142547,
	   -0.02935836092,  0.00594812585,   0.0203030128,  0.01264786068,-0.0005407619174,
	   -0.00634398777,-0.004270857666,-0.0003099146998, 0.001669131219, 0.001660885755
};

const float32_t fir_coefficients_highpass[NUM_COEFF] = {
	  0.0005600868608,-0.001335998997,-0.003108558245,-0.002197619528, 0.003676217049,
		0.01087517012, 0.009126743302,-0.007997745648, -0.02953224443, -0.02874099091,
		0.01258006506,  0.07479119301,  0.09494045377, -0.01549747214,  -0.5583462119,
		 0.5583462119,  0.01549747214, -0.09494045377, -0.07479119301, -0.01258006506,
		0.02874099091,  0.02953224443, 0.007997745648,-0.009126743302, -0.01087517012,
	  -0.003676217049, 0.002197619528, 0.003108558245, 0.001335998997,-0.0005600868608
};

float fir_states_right_channel [BUFFER_SIZE_16BITS + NUM_COEFF - 1];
float fir_states_left_channel [BUFFER_SIZE_16BITS + NUM_COEFF - 1];

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* You can monitor the converted value by adding the variable "uhADC3ConvertedValue" 
   to the debugger watch window */


__IO uint8_t send_dma = 0, memory_full = 0, current_memory_in = 1, current_memory_out = 0;

/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/





int main(void)
{

	RCC_Configuration();
	NVIC_DMA_Tx_Configuration();
	NVIC_DMA_Rx_Configuration();
	GPIO_Configuration();
	UART_Configuration();
	DMA_Tx_Configuration(uartTxBuffer_8bits1, uartTxBuffer_8bits2, BUFFER_SIZE_8BITS*SENDING_BLOCKS +5);
	DMA_Rx_Configuration(uartRxBuffer_8bits1, uartRxBuffer_8bits2, BUFFER_SIZE_8BITS);


	arm_fir_init_f32(&fir_struct_right_channel, NUM_COEFF, (float32_t *)&fir_coefficients_bandpass[0], &fir_states_right_channel[0], BUFFER_SIZE_16BITS);
	arm_fir_init_f32(&fir_struct_left_channel, NUM_COEFF, (float32_t *)&fir_coefficients_lowpass[0], &fir_states_left_channel[0], BUFFER_SIZE_16BITS);

	uint16_t angle;

	while (1)
	  {


		while(memory_full==0){}
		memory_full = 0;

		angle = get_angle();

		/*************************** FORMATTING INPUT DATA ******************************/

		convert_8bits_to_16bits(uartRxBuffer_8bits[current_memory_in], data_in_buffer_16bits, BUFFER_SIZE_16BITS);

		arm_q15_to_float (( q15_t *)data_in_buffer_16bits, data_in_buffer_float, BUFFER_SIZE_16BITS);

		/*************************** RIGHT CHANNEL PROCESSING ******************************/

		fir_struct_right_channel.pCoeffs = (float32_t *)&fir_coefficients_bandpass[0];

		arm_fir_f32	(	&fir_struct_right_channel,
				data_in_buffer_float,
				data_out_buffer_float,
				BUFFER_SIZE_16BITS
		);

		arm_float_to_q15 (data_out_buffer_float, (q15_t *)data_out_buffer_16bits, BUFFER_SIZE_16BITS);

		convert_16bits_to_8bits(data_out_buffer_16bits ,data_out_buffer_8bits_right, BUFFER_SIZE_16BITS);

		/*************************** LEFT CHANNEL PROCESSING ******************************/

	//	for(i=0;i<BUFFER_SIZE_16BITS;i++){
	//		data_out_buffer_16bits[i] = data_in_buffer_16bits[i];
	//	}

		fir_struct_left_channel.pCoeffs = (float32_t *)&fir_coefficients_highpass[0];

		arm_fir_f32	(	&fir_struct_left_channel,
				data_in_buffer_float,
				data_out_buffer_float,
				BUFFER_SIZE_16BITS
		);

		arm_float_to_q15 (data_out_buffer_float, (q15_t *)data_out_buffer_16bits, BUFFER_SIZE_16BITS);

		convert_16bits_to_8bits(data_out_buffer_16bits ,data_out_buffer_8bits_left, BUFFER_SIZE_16BITS);


		/*************************** SENDING OUTPUT DATA ******************************/

		if(SENDING_BLOCKS == 1){
			format_Tx_Block_Mono(data_out_buffer_8bits_right, uartTxBuffer_8bits1, BUFFER_SIZE_8BITS);
		}else{
			format_Tx_Block_Stereo(data_out_buffer_8bits_right, data_out_buffer_8bits_left, uartTxBuffer_8bits1, BUFFER_SIZE_8BITS);
		}


		while(send_dma==1){}
		send_dma = 1;
		sendBlockDMA();

	  }
}



#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/**
  * @}
  */ 

/**
  * @}
  */ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
